/*
	Luke Kim - 1478875
	COSC 3360: Fundamentals of Operating Systems â€“ Assignment 1
	Due: February 12, 2020 (extended to the 19th)

	This program will simulate the execution of processes of a tablet with a
	multi-core processing unit, one solid-state drive, one display, and a large memory.
	The program will take in file inputs full of processes and output the total simulation time,
	number of processes completed, total number of SSD accesses, average number of busy cores,
	and the SSD utilization (fraction of time that the device was busy).
*/

#include <iostream>
#include <string>
#include <fstream>
#include <queue>
using namespace std;

struct node {
	int startTime;
	int time_taken;
	int PID; 
	int time_completed; 
	bool isInteractive;
	string request; 
	string state;
	node* next;
	node* down;
};

class listOfList {
private:
	node* head;
	node* rear;

public:
	listOfList() {
		head = rear = 0;
	}

	node* returnHead() { 
		return head; 
	}

	void addNode(string word, int val, int pid, int startTime) {
		node* nodeToAdd = new node;
		nodeToAdd->request = word;
		nodeToAdd->time_taken = val;
		nodeToAdd->PID = pid;
		nodeToAdd->startTime = startTime;
		nodeToAdd->next = 0;
		nodeToAdd->down = 0;

		if (head == 0) {
			head = rear = nodeToAdd;
			return;
		}

		if (word == "START") {
			rear->next = nodeToAdd;
			rear = nodeToAdd;
		}

		else {

			if (word == "CORE") {
				nodeToAdd->state = "ARRIVAL";
			}

			node* cuBottom = rear;

			while (cuBottom->down != 0) {
				cuBottom = cuBottom->down;
			}

			cuBottom->down = nodeToAdd;
		}
	}

	void printList() {
		node* cu = head;
		while (cu != 0) {
			node* cuDown = cu;

			while (cuDown != 0) {
				cout << cuDown->PID << " " << cuDown->request << "  " << cuDown->time_taken << endl;
				cuDown = cuDown->down;
			}

			cu = cu->next;
		}
	}

};

int numOfProcesses = 0;
int initialStartTime = 0;
int freeCores = 0;
int ssdCount = 0;
bool coresBusy = false;
int totalTime = 0;
double ssdUtil = 0;
bool ssdFree = true;
int coreTime = 0;

queue<node*> iqueue;
queue<node*> niqueue;
queue<node*> ssdQueue;
queue<node*> scheduleQueue;
vector<node*> ttyQueue;

void scheduleProcesses(listOfList &events);
void showQueue(queue<node*> &);
void startProcessing();
void core_request(node*&, bool isInt);
void core_release(node*&);
void ssd_request(node*&);
void ssd_release(node*&, bool &);
void tty_request(node*&);
void tty_release();

void showQueue(queue<node*> &que) {
	while (!que.empty()) {
		node* temp = que.front();
		que.pop();
		cout << temp->request << " " << temp->time_taken << endl;
	}
}

void scheduleProcesses(listOfList &events) {
	node* cuHead = events.returnHead();

	while (cuHead != 0) {
		cuHead->PID = cuHead->down->PID;
		scheduleQueue.push(cuHead);
		cuHead = cuHead->next;
	}

	startProcessing();
}

void startProcessing() {
	node* tempEvent;
	node* poppedEvent;
	while (!scheduleQueue.empty()) {
		poppedEvent = scheduleQueue.front();
		if (poppedEvent->request == "START") {
			cout << poppedEvent->PID << " | " << poppedEvent->request << " | " << poppedEvent->time_taken << " SCHEDULED" << endl;
		}

		else {
			cout << "Popped event: " << poppedEvent->PID << " | " << poppedEvent->request << " | " << poppedEvent->time_taken << endl;
		}

		if (poppedEvent->request == "CORE") {
			cout << "Process " << poppedEvent->PID << " requests CORE for " << poppedEvent->time_taken << " ms" << endl;
			tempEvent = poppedEvent;
			core_release(poppedEvent);
			core_request(poppedEvent, poppedEvent->isInteractive);
			if (poppedEvent->PID != tempEvent->PID) {
				cout << "tempEvent and poppedEvent is DIFFERENT" << endl;
				cout << "TEMP: " << tempEvent->PID << " | " << tempEvent->request << " | " << tempEvent->time_taken << endl;
				cout << "POPPED: " << poppedEvent->PID << " | " << poppedEvent->request << " | " << poppedEvent->time_taken << endl;
				core_request(tempEvent, tempEvent->isInteractive);
			}
		}

		else if (poppedEvent->request == "SSD") {
			tempEvent = poppedEvent;
			ssd_release(poppedEvent, poppedEvent->down->isInteractive);

			if (tempEvent != poppedEvent) {
				ssd_request(tempEvent);
			}

			cout << "Process " << poppedEvent->PID << " requests SSD for " << poppedEvent->time_taken << " ms" << endl;
			ssd_request(poppedEvent);
		}

		else if (poppedEvent->request == "TTY") {
			tty_release();
			tty_request(poppedEvent);
			scheduleQueue.pop();
			continue;
		}

		scheduleQueue.pop();

		if (poppedEvent->state != "READY" && poppedEvent->down != NULL) {
			cout << "Process " << poppedEvent->down->PID << ": " << poppedEvent->down->request << " | " << poppedEvent->down->time_taken << " pushed at the end of the SCHEDULE queue" << endl;
			scheduleQueue.push(poppedEvent->down);
		}

		cout << '\n';
	}
	while (!iqueue.empty()) {
		core_release(poppedEvent);
		cout << "Process " << poppedEvent->PID << ": " << poppedEvent->request << " | " << poppedEvent->time_taken << " pushed at the end of the SCHEDULE queue" << endl;
		scheduleQueue.push(poppedEvent);
		cout << "Process Restarting" << endl;
		startProcessing();
	}

	while (!niqueue.empty()) {
		core_release(poppedEvent);
		cout << "Process " << poppedEvent->PID << ": " << poppedEvent->request << " | " << poppedEvent->time_taken << " pushed at the end of the SCHEDULE queue" << endl;
		scheduleQueue.push(poppedEvent);
		cout << "Process Restarting" << endl;
		startProcessing();
	}

	if (!ttyQueue.empty()) {
		tty_release();
	}
}

void core_request(node*& coreNode, bool isInt) {

	coreNode->time_completed = totalTime + coreNode->time_taken;

	if (freeCores > 0) {
		coreNode->state = "RUNNING";
		cout << "Process " << coreNode->PID << " state: " << coreNode->state << endl;
		freeCores--;
		cout << "Available cores: " << freeCores << endl;
		totalTime += coreNode->time_taken;
		coreTime += coreNode->time_taken;
		cout << "Process " << coreNode->PID << " completes CORE request at " << totalTime << " ms" << endl;
		cout << "Summary: " << endl;
		cout << "Total time: " << totalTime << " ms" << endl;
		cout << "Number of SSD accesses: " << ssdCount << endl;
		cout << "Number of processes completed: " << numOfProcesses << endl;
		cout << "Number of average busy cores: " << double(coreTime) / totalTime << endl;
		cout << "The SSD utilization: " << double(ssdUtil) / totalTime << endl;
	}

	else {
		coresBusy = true;
		coreNode->state = "READY";
		cout << "CORE is BUSY " << endl;

		if (isInt) {
			cout << "Process " << coreNode->PID << " pushed to Interactive queue" << endl;
			iqueue.push(coreNode);
		}

		else {
			cout << "Process " << coreNode->PID << " pushed to non-Interactive queue" << endl;
			niqueue.push(coreNode);
		}

		cout << "Process " << coreNode->PID << " state: " << coreNode->state << endl;
	}
}

void core_release(node*& processToPop) {

	if (!iqueue.empty()) {
		processToPop = iqueue.front();
		cout << "Process " << processToPop->PID << " wants CORE at " << totalTime << " ms for " << processToPop->time_taken << " ms from IQ" << endl;
		iqueue.pop();
		freeCores++;
	}

	else if (!niqueue.empty()) {
		processToPop = niqueue.front();
		cout << "Process " << processToPop->PID << " wants CORE at " << totalTime << " ms for " << processToPop->time_taken << " ms from NIQ" << endl;
		niqueue.pop();
		freeCores++;
	}

	if (freeCores > 0) {
		coresBusy = false;
	}
}

void ssd_request(node*& ssdNode) {

	ssdNode->state = "BLOCKED";
	ssdNode->time_completed = totalTime + ssdNode->time_taken;

	ssdCount++;

	if (ssdFree) {
		cout << "Process " << ssdNode->PID << " gets SSD for " << ssdNode->time_taken << " ms" << endl;

		ssdFree = false;

		if (!coresBusy && ttyQueue.empty()) {
			totalTime += ssdNode->time_taken;
			cout << "Total time: " << totalTime << endl;
		}
	}

	else {
		cout << "SSD is BUSY" << endl;
		cout << "Process " << ssdNode->PID << " pushed to SSD queue" << endl;
		ssdQueue.push(ssdNode);
	}
}

void ssd_release(node*& ssdNode, bool &isInt) {
	isInt = false;
	if (!ssdQueue.empty()) {
		ssdNode = ssdQueue.front();
		ssdQueue.pop();
		cout << "Process " << ssdNode->PID << " completes SSD request at " << ssdNode->time_completed << " ms" << endl;
		scheduleQueue.push(ssdNode);
		cout << "Process " << ssdNode->PID << ": " << ssdNode->request << " | " << ssdNode->time_taken << " pused to SCHEDULE queue " << endl;
	}

	else {
		ssdFree = true;
	}
}

void tty_request(node*& ttyNode) {
	ttyNode->state = "BLOCKED";
	ttyNode->startTime = totalTime;
	ttyNode->time_completed = totalTime + ttyNode->time_taken;
	ttyQueue.push_back(ttyNode);
	cout << "Process " << ttyNode->PID << " will interact TTY for " << ttyNode->time_taken << " ms" << endl;
	cout << "Process " << ttyNode->PID << " will complete TTY at time " << ttyNode->time_completed << " ms" << endl;
	ttyNode->down->isInteractive = true;
}

void tty_release() {
	for (int i = 0; i < ttyQueue.size(); i++) {
		cout << "Checking process " << ttyQueue.at(i)->PID << " | " << ttyQueue.at(i)->request << " | " << ttyQueue.at(i)->time_taken << " ===> " << ttyQueue.at(i)->time_completed << endl;
		if (totalTime >= ttyQueue.at(i)->time_completed) {
			cout << "THIS DOES HAPPEN--------------------------------------------" << endl;
			cout << "process: " << ttyQueue.at(i)->PID << " completed TTY request at time " << ttyQueue.at(i)->time_completed << endl;

			if (!coresBusy) {
				cout << "process: " << ttyQueue.at(i)->PID << " gets CORE for " << ttyQueue.at(i)->down->time_taken << endl;			
			}

			cout << "Process " << ttyQueue.at(i)->down->PID << ": " << ttyQueue.at(i)->down->request << " | " << ttyQueue.at(i)->down->time_taken << " pushed at the end of the SCHEDULE queue" << endl;

			scheduleQueue.push(ttyQueue.at(i)->down);
			ttyQueue.erase(ttyQueue.begin() + i);
			startProcessing();
		}
	}

	if (scheduleQueue.empty() && !ttyQueue.empty()) {
		node* toRelease = ttyQueue.at(0);
		int earliestTime = toRelease->startTime + toRelease->time_taken;
		int indexToDelete = 0;

		for (int i = 1; i < ttyQueue.size(); i++) {
			if (ttyQueue.at(i)->startTime + ttyQueue.at(i)->time_taken < earliestTime) {
				indexToDelete = i;
				toRelease = ttyQueue.at(i);
				earliestTime = toRelease->startTime + toRelease->time_taken;
			}
		}

		totalTime = toRelease->time_completed;
		cout << "Process " << toRelease->PID << " completed TTY request at " << toRelease->time_completed << " ms" << endl;
		cout << "Process " << toRelease->down->PID << ": " << toRelease->down->request << " | " << toRelease->down->time_taken << " pushed at the end of the SCHEDULE queue" << endl;
		scheduleQueue.push(toRelease->down);
		ttyQueue.erase(ttyQueue.begin() + indexToDelete);
		startProcessing();
	}
}

int main() {

	listOfList eventList;

	int value;
	string word;
	int eventsPID = 0;
	int eventsStartTime = 0;

	ifstream inFile;
	inFile.open("myinput2.txt");

	while (inFile >> word >> value) {

		if (word == "NCORES") {
			freeCores = value;
		}

		else if (word == "PID") {
			eventsPID = value;
		}

		else {
			if (word == "START") {
				eventsStartTime = value;

				if (numOfProcesses == 0) {
					initialStartTime = value;
				}

				numOfProcesses++;
			}
			eventList.addNode(word, value, eventsPID, eventsStartTime);
		}
	}

	totalTime += initialStartTime;

	node* beginningHead = eventList.returnHead();
	scheduleProcesses(eventList);
	system("pause");
	return 0;
}
