/*
	Luke Kim - 1478875
	COSC 3360: Fundamentals of Operating Systems â€“ Assignment 2
	Due: March 25, 2020

	This program will act as the server program, which will wait for requests
	from the client program, and exchange one-line text messages to the
	client program.
*/

#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <unistd.h>
using namespace std;

struct node {
	node* next;
	string location;
	int temperature;
	string forecast;
};

class weatherTable {
private:
	node* head;
	node* rear;

public:
	weatherTable() {
		head = rear = nullptr;
	}

	node* getHead() {
		return head;
	}

	void printTable() {
		node* cu = head;
		while (cu != nullptr) {
			cout << cu->location << " " << cu->temperature << " " << cu->forecast << endl;
			cu = cu->next;
		}
	}

	// Converts each row from the 2D array into one entry (node)
	void storeEntry(string**& array, int rowSize, int colSize) {

		for (int i = 0; i < rowSize; i++) {

			node* entry = new node;
			entry->next = nullptr;
			entry->location = "";
			entry->temperature = 0;
			entry->forecast = "";

			if (head == nullptr) {
				head = rear = entry;
			}

			for (int j = 0; j < colSize; j++) {

				if (j == 0) {
					rear->next = entry;
					entry->location = array[i][j];
					rear = entry;
				}

				else if (j == 1) {
					entry->temperature = stoi(array[i][j]);
				}

				else {
					entry->forecast = array[i][j];
				}
			}
		}		
	} 
};

// Stores line by line into a 2D array
void storeWeather(ifstream& file, string**& array, int lineCount) {
	string line = "";
	string field = "";

	for (int i = 0; i < lineCount; i++) {

		getline(file, line);
		stringstream iss(line);

		for (int j = 0; j < 3; j++) {
			getline(iss, field, ',');
			array[i][j] = field;
		}
	}
}

void showTable(string** array, int rowSize, int colSize) {
	for (int i = 0; i < rowSize; i++) {
		for (int j = 0; j < colSize; j++) {
			cout << array[i][j] << " ";
		}
		cout << endl;
	}
}

int main() {

	string line;
	int lineCount = 0;
	int colSize = 3;
	weatherTable table;

	ifstream inFile;
	inFile.open("weather20.txt");

	while (getline(inFile, line)) {
		lineCount++;
	}

	inFile.close();

	string** array = new string*[lineCount];
	for (int i = 0; i < lineCount; i++) {
		array[i] = new string[colSize];
	}

	ifstream inFile2;
	inFile2.open("weather20.txt");

	storeWeather(inFile2, array, lineCount);
	//showTable(array, lineCount, colSize);

	table.storeEntry(array, lineCount, colSize);
	//table.printTable();

	int listening = socket(AF_INET, SOCK_STREAM, 0);
	if (listening == -1) {
		cerr << "Can't create a socket!" << endl;
		return -1;
	}
	
	int port;
	cout << "Enter server port number: ";
	cin >> port;
	string ipAddress = "127.0.0.1";

	sockaddr_in hint;
	hint.sin_family = AF_INET;
	hint.sin_port = htons(port);

	inet_pton(AF_INET, ipAddress.c_str(), &hint.sin_addr);

	if (bind(listening, (sockaddr*)&hint, sizeof(hint)) == -1) {
		cerr << "Can't bind to IP/port" << endl;
		return -2;
	}

	if (listen(listening, SOMAXCONN) == -1) {
		cerr << "Can't listen" << endl;
		return -3;
	}

	sockaddr_in client;
	socklen_t clientSize = sizeof(client);
	char host[NI_MAXHOST];
	char svc[NI_MAXSERV];

	int clientSocket = accept(listening, (sockaddr*)&client, &clientSize);

	if (clientSocket == -1) {
		cerr << "Problem with client connection" << endl;
		return -4;
	}

	close(listening);

	memset(host, 0, NI_MAXHOST);
	memset(svc, 0, NI_MAXSERV);

	int result = getnameinfo((sockaddr*)&client, sizeof(client), host, NI_MAXHOST, svc, NI_MAXSERV, 0);

	inet_ntop(AF_INET, &client.sin_addr, host, NI_MAXHOST);

	char buffer[4096];

	while (true) {
		memset(buffer, 0, 4096);
		int bytesReceived = recv(clientSocket, buffer, 4096, 0);
		if (bytesReceived == -1) {
			cerr << "There was a connection issue" << endl;
			break;
		} 

		 if (bytesReceived == 0) {
			cout << "The client disconnected" << endl;
			break;
		} 
	
		//cout << "Weather report for " << string(buffer, 0, bytesReceived) << endl;

		if (buffer[0] != 0) {
			node* cu = table.getHead();

			while (cu->next != nullptr) {

				if (cu->location == string(buffer)) {
					cout << "Weather report for " << cu->location << endl;
					cout << "Tomorrow's maximum temperature is " << cu->temperature << " F" << endl;
					cout << "Tomorrow's sky condition is " << cu->forecast << endl;
					break;
				}
				cu = cu->next;
			}

			if (cu->next == nullptr && string(buffer) == "Truth or Consequences") {
				cout << "Weather report for " << cu->location << endl;
				cout << "Tomorrow's maximum temperature is " << cu->temperature << " F" << endl;
				cout << "Tomorrow's sky condition is " << cu->forecast << endl;
			}

			else {
				cout << "No data" << endl;
			}
		}
			
		send(clientSocket, buffer, bytesReceived + 1, 0);
	}

	close(clientSocket);

	return 0;
}
